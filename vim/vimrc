call plug#begin('~/.vim/plugged')

Plug 'Valloric/MatchTagAlways'
Plug 'bling/vim-airline'
Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plug 'fatih/vim-go', {'autoload':{'filetypes':['go']}}
Plug 'flazz/vim-colorschemes'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'mxw/vim-jsx'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'othree/html5.vim'
Plug 'othree/yajs.vim'
Plug 'scrooloose/nerdtree'
Plug 'benekastah/neomake'
Plug 'tpope/vim-fugitive'
Plug 'vim-ruby/vim-ruby'
Plug 'Shougo/neocomplete.vim'
Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdcommenter'

call plug#end()

" FILETYPE OVERRIDES
au BufNewFile,BufRead *.ctp set filetype=php
" MATCH TAG ALWAYS
let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'jinja' : 1,
      \ 'eruby' : 1,
      \ 'php' : 1,
      \ 'jsx' : 1,
      \ 'javascript' : 1,
      \ }

" NEOCOMPLETE CONFIG
let g:neocomplete#enable_at_startup = 1

" GO-VIM
let g:go_fmt_fail_silently = 1

" JSX
let g:syntastic_javascript_checkers = ['jsxhint']

" INDENT COLOURS
if has("gui_running")
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 1
endif
" AIRLINE CONFIG
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

" UNITE
"if executable('pt')
"    let g:unite_source_grep_command = 'pt'
"    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
"    let g:unite_source_grep_recursive_opt = ''
"    let g:unite_source_grep_encoding = 'utf-8'
"elseif executable('ag')
"    let g:unite_source_grep_command='ag'
"    let g:unite_source_grep_default_opts='--nocolor --nogroup -S -C4'
"    let g:unite_source_grep_recursive_opt=''
"    let g:unite_source_rec_async_command='ag --nocolor --nogroup -g ""'
"elseif executable('ack')
"    let g:unite_source_grep_command='ack'
"    let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
"    let g:unite_source_grep_recursive_opt=''
"endif
"let g:unite_source_history_yank_enable = 1
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
"nnoremap <leader>p :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/git<cr>
"nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
"nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank history/yank<cr>
"nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  -start-insert buffer<cr>
"nnoremap <leader>/ :<C-u>Unite -no-split -buffer-name=files   -start-insert grep:.<cr>
"" Custom mappings for the unite buffer
"autocmd FileType unite call s:unite_settings()
"function! s:unite_settings()
"  " Play nice with supertab
"  let b:SuperTabDisabled=1
"  " Enable navigation with control-j and control-k in insert mode
"  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
"  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"endfunction

" ACK
let g:ackprg = 'pt --nogroup --nocolor --column'

" IF GUI RUNNING
if has("gui_running")
  set noanti
  set guifont=monaco:h13
endif

" SET THEME
set background=dark
try
  color Tomorrow-Night-Eighties
catch
endtry

" GENERAL {
syntax on
set colorcolumn=80
set showcmd
" }

" SEARCH {
set ignorecase
set smartcase
set incsearch
set hlsearch
" }

" INDENTING {
set tabstop=2
set shiftwidth=2
set softtabstop=2
set smartindent
set smarttab
set expandtab
set copyindent
" }

" REMAP
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
map <leader>n :NERDTreeToggle<CR>           " map nerdtree to ctrl+n

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['rubocop']

" RUBY
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
" JS
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
" COFFEE
autocmd FileType coffee setlocal shiftwidth=2 tabstop=2
" Strip trailing whitespace
autocmd FileType * autocmd BufWritePre <buffer> call StripTrailingWhitespace()
" Strip trailing blank lines
autocmd filetype c,cpp,java,go,php,javascript,perl,puppet,python,ruby,rust,twig,vim,xml,yml autocmd BufWritePre <buffer> call StripTrailingNewline()

" Save state and run cmd {
function! RunCmd(cmd)
  " Save the last search
  let last_search=@/
  " Save the current cursor position
  let save_cursor = getpos(".")
  " Save the window position
  normal H
  let save_window = getpos(".")
  call setpos('.', save_cursor)

  " Do the business:
  execute a:cmd

  " Restore the last_search
  let @/=last_search
  " Restore the window position
  call setpos('.', save_window)
  normal zt
  " Restore the cursor position
  call setpos('.', save_cursor)
endfunction
" }

" Strip whitespace {
function! StripTrailingWhitespace()
  call RunCmd('silent %s/\s\+$//e')
endfunction
" }

" Strip trailing newline {
function! StripTrailingNewline()
  call RunCmd('%s/\($\n\s*\)\+\%$//e')
endfunction
" }
